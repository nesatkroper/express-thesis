generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId    String   @id @default(uuid())
  email     String   @unique
  password  String
  fullName  String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student?
  teacher   Teacher?
}

model Student {
  studentId   String       @id @default(uuid())
  userId      String       @unique
  grade       String
  section     String
  dob         DateTime
  attendance  Attendance[]
  enrollments Enrollment[]
  grades      Grade[]
  guardians   Guardian[]
  payment     Payment[]
  user        User         @relation(fields: [userId], references: [userId])
}

model Teacher {
  teacherId String  @id @default(uuid())
  userId    String  @unique
  subject   String
  bio       String?
  classes   Class[]
  user      User    @relation(fields: [userId], references: [userId])
}

model Class {
  classId     String       @id @default(uuid())
  name        String
  subjectId   String
  teacherId   String
  scheduleId  String?
  attendance  Attendance[]
  schedule    Schedule?    @relation(fields: [scheduleId], references: [scheduleId])
  subject     Subject      @relation(fields: [subjectId], references: [subjectId])
  teacher     Teacher      @relation(fields: [teacherId], references: [teacherId])
  enrollments Enrollment[]
  grade       Grade[]
}

model Subject {
  subjectId String  @id @default(uuid())
  name      String
  code      String  @unique
  classes   Class[]
}

model Schedule {
  scheduleId String   @id @default(uuid())
  classId    String
  day        String
  startTime  DateTime
  endTime    DateTime
  class      Class[]
}

model Enrollment {
  enrollmentId String  @id @default(uuid())
  studentId    String
  classId      String
  class        Class   @relation(fields: [classId], references: [classId])
  student      Student @relation(fields: [studentId], references: [studentId])
}

model Attendance {
  attendanceId String           @id @default(uuid())
  date         DateTime
  status       AttendanceStatus
  studentId    String
  classId      String
  class        Class            @relation(fields: [classId], references: [classId])
  student      Student          @relation(fields: [studentId], references: [studentId])
}

model Grade {
  gradeId   String   @id @default(uuid())
  studentId String
  classId   String
  score     Float
  examType  ExamType
  class     Class    @relation(fields: [classId], references: [classId])
  student   Student  @relation(fields: [studentId], references: [studentId])
}

model Guardian {
  gurdianId String  @id @default(uuid())
  fullName  String
  contact   String
  studentId String
  student   Student @relation(fields: [studentId], references: [studentId])
}

model Payment {
  paymentId String        @id @default(uuid())
  studentId String
  amount    Float
  status    PaymentStatus
  paidAt    DateTime?
  student   Student       @relation(fields: [studentId], references: [studentId])
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum ExamType {
  MIDTERM
  FINAL
  QUIZ
  ASSIGNMENT
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}
